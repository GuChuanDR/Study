#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <math.h>

//****************************//
//********求字符串长度********//
//****************************//
#include <string.h>
//int my_strlen(char* str)  //这里的str是一个指针变量
//{
//	int count = 0;
//	while(*str != '\0')  //一直找到\0才停止
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
int my_strlen(char* str)
{
	if(*str != '\0')
		return 1+my_strlen(str+1);
	else
		return 0;
}
//把大师化小
//my_strlen("bit");
//1+my_strlen("it");
//1+1+my_strlen("t");
//1+1+1+my_strlen("");
//1+1+1+0 

int main()
{
	char arr[] = "bit";        //arr   bit\0
	//int len = strlen(arr);   //求字符串长度
	//printf("字符串长度->%d\n",len);
	//模拟实现一个strlen函数
	int len = my_strlen(arr);   
	//arr是数组，数组传参，传过去的不是整个数组，而是一个元素的地址
	printf("len = %d\n",len);
	return 0;
}







void print(int n)
{
	if(n>9)
	{
		print(n/10);
	}
	printf("%d ",n%10);
}
int main()
{
	unsigned int num = 0;
	scanf("%d",&num);  //1234
	//递归，函数自己调用自己
	print(num);
	//print(1234)
	//print(123)  4
	//print(12)   3  4
	//print(1)    2  3  4
	return 0;
}



//************************//
//******最简单的递归******//
//************************//
int main()
{
	printf("hehe\n");
	main();
	return 0;
}





#include "Add.h"
int main()
{
	int a = 10;
	int b = 20;
	int sum = 0;
	sum = Add(a,b);
	printf("%d\n",sum);
	return 0;
}



int main()
{
	printf("%d",printf("%d",printf("%d",43)));  //打印 4321
	return 0;
}



{
	int len = 0;
	//1
	len = strlen("abc");
	printf("%d\n",len);
	//2
	printf("%d\n",strlen("abc"));  //链式访问
}







//**********************************************//
//写一个函数，每调用一次这个函数，就会将num增加1//
//**********************************************//

void Add(int* p)
{
	(*p)++;    //++优先级较高，作用于p，不是*p
}
int main()
{
	int num = 0;
	Add(&num);   //传址的形式
	printf("num = %d\n",num);
	Add(&num);
	printf("num = %d\n",num);
	Add(&num);
	printf("num = %d\n",num);
	return 0;
}




//************************//
//********二分查找********//
//查找有序数组中某个数，找到返回数的下标，找不到返回-1//
int binary_search(int arr[],int k,int sz)  //本质上arr是一个指针
{
	int left = 0;
	int right = sz-1;
	while(left<=right)
	{
	int mid = (left+right)/2;
	if(arr[mid] < k)
	{
		left = mid+1;
	}
	else if(arr[mid] > k)
	{
		right = mid-1;
	}
	else
	{
		return mid;
	}
	}
	return -1;
}

int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int k = 7;
	int sz = sizeof(arr)/sizeof(arr[0]);  //要在函数外部计算函数个数
	int ret = binary_search(arr,k,sz);   //这里的arr传递过去的是首元素的地址
	if(ret == -1)
	{
		printf("找不到指定数字\n");
	}
	else
	{
		printf("找到了->%d\n",ret);
	}
	return 0;
}




//*******************************//
//****用函数打印1000-2000闰年****//
//*******************************//
int is_leap_year(int n)
{
	if((n%4==0 && n%100!=0) || (n%400 == 0))
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

int main()
{
	int year = 0;
	int count = 0;
	printf("打印闰年->\n");
	for(year=1000;year<=2000;year++)
	{
		if(is_leap_year(year) == 1)
		{
			printf("%d ",year);
			count++;
		}
	}
	printf("\n总个数>%d\n",count);
	return 0;
}





//**************************************//
//******用函数写法打印1-200间的素数*****//
//**************************************//
//是素数返回1，否则返回0
int is_prime(int n)
{        
	int j = 0;
	int count = 0;
	//for(j=2;j<n;j++)   //产生2-(n-1)个数进行试除一下
	for(j=2;j<=sqrt(n);j++)
	{
		if(n%j == 0)
		{
			return 0;
		}
		return 1;     //剩下的就是n=j的情况
	}
}
	
int main()
{
	//打印1-200间的素数
	int i = 0;
	int count = 0;
	for(i=100;i<=200;i++)
	{
		//判断i是否为素数
		if(is_prime(i) == 1)
		{
			printf("%d ",i);
		    count++;
		}
	}
	printf("\n个数>%d\n",count);
return 0;
}
