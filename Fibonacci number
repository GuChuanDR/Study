
//********求第n个斐波那契数（不考虑溢出）**********//
//1 1 2 3 5 8 13 21 34 55...前两个数之和等于第三个数

//int Fib(int n)
//{
//	int i = 0;
//	int ret = 0;
//	if(n<=2)
//		return 1;
//	if(n>2)
//	{
//		ret = Fib(n-1)+Fib(n-2);
//	}
//	return ret;
//}

//改进后的程序
int Fib(int n)
{
	int a =1;
	int b =1;
	int c =1;
	while(n>2)
	{
	c = a + b;
	a = b;
	b = c;
	n--;
	}
	return c;
}

int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d",&n);
	//TDD-测试驱动开发
	ret = Fib(n);
	printf("ret = %d\n",ret);
	return 0;
}




////***********求n的阶乘***********//
//法一，最简单的函数写法
//int Fac1(int n)
//{
//	int i = 0;
//	int ret = 1;
//	for(i=1;i<=n;i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}
//int main()
//{
//	int n = 0;
//	int ret = 0;
//	scanf("%d",&n);
//	ret = Fac1(n);
//	printf("%d\n",ret);
//	return 0;
//}





//法二，用递归的写法
int Fac2(int n)
{
	if(n<=1)
		return 1;
	else
		return n*Fac2(n-1);
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d",&n);
	ret = Fac2(n);
	printf("%d\n",ret);
	return 0;
}
