#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
int main()
{
	int arr[3][4] = {{1,2,3},{4,5}};   // 可存放3行4列的2维数组
	char ch[5][6];
	return 0;
}




int main()
{
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int sz = sizeof(arr)/sizeof(arr[0]);
	int i = 0;
	for(i=0;i<sz;i++)
	{
		printf("&arr[%d] = %p\n",i,&arr[i]);
	}
	return 0;
}





int main()
{
	//char arr[] = "abcdef";
	////printf("%c\n",arr[3]);  //3是下标
	//int i = 0;
	//int len = strlen(arr);
	//for(i=0;i<len;i++)
	//{
	//	printf("%c ",arr[i]);
	//}
	int arr[] = {1,2,3,4,5,6,7,8,9,10};
	int sz = sizeof(arr)/sizeof(arr[0]);
	int i = 0;
	for(i=0;i<sz;i++)
	{
		printf("%d ",arr[i]);
	}
	return 0;
}





int main()
{
	char arr1[] = "abc";
	char arr2[] = {'a','b','c'};
	printf("%d\n",sizeof(arr1));//4
	printf("%d\n",sizeof(arr2));//3
	printf("%d\n",strlen(arr1));//3
	printf("%d\n",strlen(arr2));//3
	return 0;
}



int main()
{
	int arr[10];//arr是数组名，10代表元素的个数
	char arr2[5];
	
	return 0;
}



//**************//
//***2021_3_7***//
//**************//
int main()
{
	int arr [3][4] = {{1,2,3,4},{5,6,7,8}};
	int i = 0;
	for(i=0;i<3;i++)
	{
		int j =0;
		for(j=0;j<4;j++)
		{
			printf("&arr[%d][%d] = %p\n",i,j,&arr[i][j]); 
		}
		printf("\n");
	}
	return 0;
}




//******************************//
//*****使用冒泡函数进行排序*****//
void bubble_sort(int arr[],int sz)
{
	int flag = 1;           //假设这一趟要排序的数据已经有序 
	//确定冒泡函数的趟数
	int i = 0;
	for(i=0;i<sz-1;i++)
	{
		//每一趟冒泡排序
		int j =0;
		for(j=0;j<sz-1-i;j++)   //这里j的变量是987...
		{
			if(arr[j]>arr[j+1])
			{
				int tmp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = tmp;
				flag = 0;    //本趟排序的而数据其实不完全有序
			}
		}
		if(flag == 1)
		{
			break;
		}
	}
}
//两两相邻的数进行比较交换
int main()
{	int arr[] = {9,8,7,6,5,4,3,2,1,0};
	int i = 0;
	//对arr进行排序，升序。arr是数组，我们对arr进行传参，实际上传递过去的是数组arr首元素的地址→&arr[0]
	int sz = sizeof(arr)/sizeof(arr[0]);
	bubble_sort(arr,sz);//冒泡排序函数
	for(i=0;i<sz;i++)
	{
		printf("%d ",arr[i]);
	}
	return 0;
}



//需要注意的地方
int main()
{
	int arr[] = {1,2,3,4,5,6,7};
	printf("%p\n",arr);  
	printf("%p\n",&arr[0]);     //数组名arr其实是首元素地址，这个+1是+4个字节，与上面那句是一样的
	printf("%d\n",*arr);        //打印首元素

	printf("%d\n",&arr);        //取出的是arr数组的地址，注意！如果给他+1就会增加28，是因为这个数组中有7个元素，一个原元素4个字节，4*7=28
	//两种情况例外，1.sizeof(数组名)- 数组名代表整个数组，计算的是整个数组的大小，单位是字节
	//2.&数组名，数组名代表整个数组，&取出的整个数组的地址
	int sz = sizeof(arr)/sizeof(arr[0]);
	return 0;
}

